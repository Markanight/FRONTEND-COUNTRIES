{"ast":null,"code":"const initialState = {\n  countries: [],\n  countryDetail: [],\n  allActivities: [],\n  allContinents: [],\n  population: [],\n  alphabetic: [],\n  activities: []\n};\nfunction rootReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case 'STORE_COUNTRIES':\n      return {\n        ...state,\n        countries: action.payload,\n        population: action.payload,\n        allContinents: action.payload,\n        alphabetic: action.payload,\n        allActivities: action.payload\n      };\n    case 'STORE_COUNTRY_DETAIL':\n      return {\n        ...state,\n        countryDetail: action.payload\n      };\n    case 'GET_NAME_COUNTRY':\n      return {\n        ...state,\n        countries: action.payload\n      };\n    case 'GET_ALL_ACTIVITIES':\n      return {\n        ...state,\n        activities: action.payload\n      };\n    case 'GET_FILTER_POPULATION':\n      const population = state.population;\n      const filterMin = action.payload === 'Min' ? population.sort((a, b) => {\n        if (a.population > b.population) {\n          return 1;\n        }\n        if (b.population > a.population) {\n          return -1;\n        }\n        return 0;\n      }) : population.sort((a, b) => {\n        if (a.population > b.population) {\n          return -1;\n        }\n        if (b.population > a.population) {\n          return 1;\n        }\n        return 0;\n      });\n      return {\n        ...state,\n        countries: filterMin\n      };\n    case 'GET_FILTER_CONTINENT':\n      const allContinents = state.allContinents;\n      const filterContinent = allContinents.filter(country => country.continent === action.payload);\n      return {\n        ...state,\n        countries: action.payload === 'All' ? allContinents : filterContinent\n      };\n    case 'GET_FILTER_ACTIVITY':\n      const allActivities = state.allActivities;\n      const filterActivity = action.payload === 'All' ? allActivities.filter(country => country.activities.length > 0) : allActivities.filter(country => country.activities.find(activity => activity.name.toLowerCase() === action.payload));\n      return {\n        ...state,\n        countries: filterActivity\n      };\n    case 'GET_FILTER_ALPHABET':\n      const alphabet = state.alphabetic;\n      const alphabeticOrder = action.payload === 'Asc' ? alphabet.sort((a, b) => {\n        if (a.name > b.name) {\n          return 1;\n        }\n        if (a.name < b.name) {\n          return -1;\n        }\n        return 0;\n      }) : alphabet.sort((a, b) => {\n        if (a.name > b.name) {\n          return -1;\n        }\n        if (a.name < b.name) {\n          return 1;\n        }\n        return 0;\n      });\n      return {\n        ...state\n      };\n    default:\n      return state;\n  }\n}\nexport default rootReducer;","map":{"version":3,"names":["initialState","countries","countryDetail","allActivities","allContinents","population","alphabetic","activities","rootReducer","state","action","type","payload","filterMin","sort","a","b","filterContinent","filter","country","continent","filterActivity","length","find","activity","name","toLowerCase","alphabet","alphabeticOrder"],"sources":["C:/Users/Valeria/Downloads/PI-Countries-main/PI-Countries-main/client/src/reducer/index.js"],"sourcesContent":["const initialState = {\r\n    countries : [],\r\n    countryDetail : [],\r\n    allActivities : [],\r\n    allContinents: [],\r\n    population : [],\r\n    alphabetic : [],\r\n    activities : []\r\n\r\n\r\n}\r\n\r\n\r\nfunction rootReducer (state = initialState, action) {\r\n   switch(action.type){\r\n    case 'STORE_COUNTRIES' :\r\n        return {\r\n            ...state,\r\n            countries: action.payload,\r\n            population: action.payload,\r\n            allContinents : action.payload,\r\n            alphabetic : action.payload,\r\n            allActivities : action.payload\r\n        }\r\n    case 'STORE_COUNTRY_DETAIL' :\r\n        return {\r\n            ...state,\r\n            countryDetail: action.payload\r\n\r\n        }\r\n    case 'GET_NAME_COUNTRY' :\r\n        return {\r\n            ...state,\r\n            countries: action.payload\r\n        }\r\n\r\n    case 'GET_ALL_ACTIVITIES' :\r\n        return {\r\n            ...state,\r\n            activities : action.payload\r\n        }\r\n\r\n    case 'GET_FILTER_POPULATION' :\r\n        const population = state.population\r\n        const filterMin = action.payload === 'Min' ?\r\n        population.sort((a, b)=>{\r\n            if(a.population > b.population){\r\n               return  1\r\n            }\r\n            if (b.population > a.population){\r\n                return -1\r\n            }\r\n            return 0\r\n        }) : \r\n        population.sort((a, b)=>{\r\n            if(a.population > b.population){\r\n               return  -1\r\n            }\r\n            if (b.population > a.population){\r\n                return 1\r\n            }\r\n            return 0\r\n        })\r\n        return {\r\n            ...state,\r\n            countries : filterMin\r\n        }\r\n\r\n    case 'GET_FILTER_CONTINENT' :\r\n        const allContinents = state.allContinents\r\n        const filterContinent = allContinents.filter((country) => country.continent === action.payload)\r\n        return {\r\n            ...state,\r\n            countries : action.payload === 'All' ? allContinents : filterContinent\r\n        }\r\n\r\n    case 'GET_FILTER_ACTIVITY' :\r\n        const allActivities = state.allActivities\r\n        const filterActivity = action.payload === 'All' ? allActivities.filter((country) => country.activities.length > 0) :\r\n                               allActivities.filter((country)=> country.activities.find((activity)=> activity.name.toLowerCase() === action.payload))\r\n    return {\r\n        ...state,\r\n        countries : filterActivity\r\n    }\r\n    \r\n    case 'GET_FILTER_ALPHABET' :\r\n        const alphabet = state.alphabetic\r\n        const alphabeticOrder = action.payload === 'Asc' ? \r\n        alphabet.sort((a, b) => {\r\n            if (a.name > b.name){\r\n                return 1\r\n            }\r\n            if(a.name < b.name){\r\n                return -1\r\n            }\r\n            return 0\r\n        }) :\r\n        alphabet.sort((a, b) => {\r\n            if (a.name > b.name){\r\n                return -1\r\n            }\r\n            if(a.name < b.name){\r\n                return 1\r\n            }\r\n            return 0\r\n        })\r\n        return {\r\n            ...state\r\n        }\r\n\r\n    default :\r\n    return state\r\n   }\r\n}\r\nexport default rootReducer"],"mappings":"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"},"metadata":{},"sourceType":"module"}